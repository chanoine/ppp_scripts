function rois = fiff_sensor_rois(cfg)

% rois = fiff_sensor_rois(cfg);
%
% Input, e.g. (defaults):
%	cfg.color         = {[1 0 0]; [0 1 0]; [0 0 1]; [0 1 1]; [1 1 0]; [1 0 1]};
%	cfg.dim           = 2; % 2 or 3
%	cfg.plot_on       = 1; % 1 or 0
%	cfg.my_selection  = channel number x roi numbers % roi number = 0 is ignored; optional
%	cfg.roi_selection = 'tc'; % tc   - temporal cortices
%	                          % one  - one region
%	                          % two  - two regions
%	                          % four - four regions
%	                          % six  - six regions
%	                          % poft - parietal, occipital, frontal, temporal - neuromag arrangement
%	                          % ind  - define your individual selection in cfg.my_selection
%
% --------------------------------------------------------------------------------------------
% copyright (c) 2010, Bjoern Herrmann, Email: bherrmann@cbs.mpg.de, 2010-06-03


% Load some defaults if appropriate
% ---------------------------------
if ~isfield(cfg, 'plot_on'),       cfg.plot_on = 1; end
if ~isfield(cfg, 'roi_selection'), cfg.roi_selection = 'tc'; end
if ~isfield(cfg, 'dim'),           cfg.dim = 2; end


% Get regions
% -----------
if strcmp(cfg.roi_selection, 'one') % one roi
	rois = [0112 1; 0113 1; 0111 1; 0122 1; 0123 1; 0121 1; 0132 1; 0133 1; 0131 1; 0142 1; 0143 1; 0141 1; 0212 1; 0213 1; 0211 1; 0222 1; 0223 1; 0221 1; 0232 1; 0233 1; 0231 1; 0242 1; 0243 1; 0241 1; 0312 1; 0313 1; 0311 1; 0322 1; 0323 1; 0321 1; 0332 1; 0333 1; 0331 1; 0342 1; 0343 1; 0341 1; 0412 1; 0413 1; 0411 1; 0422 1; 0423 1; 0421 1; 0432 1; 0433 1; 0431 1; 0442 1; 0443 1; 0441 1; 0512 1; 0513 1; 0511 1; 0522 1; 0523 1; 0521 1; 0532 1; 0533 1; 0531 1; 0542 1; 0543 1; 0541 1; 0612 1; 0613 1; 0611 1; 0622 1; 0623 1; 0621 1; 0632 1; 0633 1; 0631 1; 0642 1; 0643 1; 0641 1; 0712 1; 0713 1; 0711 1; 0722 1; 0723 1; 0721 1; 0732 1; 0733 1; 0731 1; 0742 1; 0743 1; 0741 1; 0812 1; 0813 1; 0811 1; 0822 1; 0823 1; 0821 1; 0912 1; 0913 1; 0911 1; 0922 1; 0923 1; 0921 1; 0932 1; 0933 1; 0931 1; 0942 1; 0943 1; 0941 1; 1012 1; 1013 1; 1011 1; 1022 1; 1023 1; 1021 1; 1032 1; 1033 1; 1031 1; 1042 1; 1043 1; 1041 1; 1112 1; 1113 1; 1111 1; 1122 1; 1123 1; 1121 1; 1132 1; 1133 1; 1131 1; 1142 1; 1143 1; 1141 1; 1212 1; 1213 1; 1211 1; 1222 1; 1223 1; 1221 1; 1232 1; 1233 1; 1231 1; 1242 1; 1243 1; 1241 1; 1312 1; 1313 1; 1311 1; 1322 1; 1323 1; 1321 1; 1332 1; 1333 1; 1331 1; 1342 1; 1343 1; 1341 1; 1412 1; 1413 1; 1411 1; 1422 1; 1423 1; 1421 1; 1432 1; 1433 1; 1431 1; 1442 1; 1443 1; 1441 1; 1512 1; 1513 1; 1511 1; 1522 1; 1523 1; 1521 1; 1532 1; 1533 1; 1531 1; 1542 1; 1543 1; 1541 1; 1612 1; 1613 1; 1611 1; 1622 1; 1623 1; 1621 1; 1632 1; 1633 1; 1631 1; 1642 1; 1643 1; 1641 1; 1712 1; 1713 1; 1711 1; 1722 1; 1723 1; 1721 1; 1732 1; 1733 1; 1731 1; 1742 1; 1743 1; 1741 1; 1812 1; 1813 1; 1811 1; 1822 1; 1823 1; 1821 1; 1832 1; 1833 1; 1831 1; 1842 1; 1843 1; 1841 1; 1912 1; 1913 1; 1911 1; 1922 1; 1923 1; 1921 1; 1932 1; 1933 1; 1931 1; 1942 1; 1943 1; 1941 1; 2012 1; 2013 1; 2011 1; 2022 1; 2023 1; 2021 1; 2032 1; 2033 1; 2031 1; 2042 1; 2043 1; 2041 1; 2112 1; 2113 1; 2111 1; 2122 1; 2123 1; 2121 1; 2132 1; 2133 1; 2131 1; 2142 1; 2143 1; 2141 1; 2212 1; 2213 1; 2211 1; 2222 1; 2223 1; 2221 1; 2232 1; 2233 1; 2231 1; 2242 1; 2243 1; 2241 1; 2312 1; 2313 1; 2311 1; 2322 1; 2323 1; 2321 1; 2332 1; 2333 1; 2331 1; 2342 1; 2343 1; 2341 1; 2412 1; 2413 1; 2411 1; 2422 1; 2423 1; 2421 1; 2432 1; 2433 1; 2431 1; 2442 1; 2443 1; 2441 1; 2512 1; 2513 1; 2511 1; 2522 1; 2523 1; 2521 1; 2532 1; 2533 1; 2531 1; 2542 1; 2543 1; 2541 1; 2612 1; 2613 1; 2611 1; 2622 1; 2623 1; 2621 1; 2632 1; 2633 1; 2631 1; 2642 1; 2643 1; 2641 1]; 
elseif strcmp(cfg.roi_selection, 'two') % two rois
	rois = [0112 1; 0113 1; 0111 1; 0122 1; 0123 1; 0121 1; 0132 1; 0133 1; 0131 1; 0142 1; 0143 1; 0141 1; 0212 1; 0213 1; 0211 1; 0222 1; 0223 1; 0221 1; 0232 1; 0233 1; 0231 1; 0242 1; 0243 1; 0241 1; 0312 1; 0313 1; 0311 1; 0322 1; 0323 1; 0321 1; 0332 1; 0333 1; 0331 1; 0342 1; 0343 1; 0341 1; 0412 1; 0413 1; 0411 1; 0422 1; 0423 1; 0421 1; 0432 1; 0433 1; 0431 1; 0442 1; 0443 1; 0441 1; 0512 1; 0513 1; 0511 1; 0522 1; 0523 1; 0521 1; 0532 1; 0533 1; 0531 1; 0542 1; 0543 1; 0541 1; 0612 1; 0613 1; 0611 1; 0622 1; 0623 1; 0621 1; 0632 1; 0633 1; 0631 1; 0642 1; 0643 1; 0641 1; 0712 1; 0713 1; 0711 1; 0722 2; 0723 2; 0721 2; 0732 2; 0733 2; 0731 2; 0742 1; 0743 1; 0741 1; 0812 2; 0813 2; 0811 2; 0822 1; 0823 1; 0821 1; 0912 2; 0913 2; 0911 2; 0922 2; 0923 2; 0921 2; 0932 2; 0933 2; 0931 2; 0942 2; 0943 2; 0941 2; 1012 2; 1013 2; 1011 2; 1022 2; 1023 2; 1021 2; 1032 2; 1033 2; 1031 2; 1042 2; 1043 2; 1041 2; 1112 2; 1113 2; 1111 2; 1122 2; 1123 2; 1121 2; 1132 2; 1133 2; 1131 2; 1142 2; 1143 2; 1141 2; 1212 2; 1213 2; 1211 2; 1222 2; 1223 2; 1221 2; 1232 2; 1233 2; 1231 2; 1242 2; 1243 2; 1241 2; 1312 2; 1313 2; 1311 2; 1322 2; 1323 2; 1321 2; 1332 2; 1333 2; 1331 2; 1342 2; 1343 2; 1341 2; 1412 2; 1413 2; 1411 2; 1422 2; 1423 2; 1421 2; 1432 2; 1433 2; 1431 2; 1442 2; 1443 2; 1441 2; 1512 1; 1513 1; 1511 1; 1522 1; 1523 1; 1521 1; 1532 1; 1533 1; 1531 1; 1542 1; 1543 1; 1541 1; 1612 1; 1613 1; 1611 1; 1622 1; 1623 1; 1621 1; 1632 1; 1633 1; 1631 1; 1642 1; 1643 1; 1641 1; 1712 1; 1713 1; 1711 1; 1722 1; 1723 1; 1721 1; 1732 1; 1733 1; 1731 1; 1742 1; 1743 1; 1741 1; 1812 1; 1813 1; 1811 1; 1822 1; 1823 1; 1821 1; 1832 1; 1833 1; 1831 1; 1842 1; 1843 1; 1841 1; 1912 1; 1913 1; 1911 1; 1922 1; 1923 1; 1921 1; 1932 1; 1933 1; 1931 1; 1942 1; 1943 1; 1941 1; 2012 1; 2013 1; 2011 1; 2022 2; 2023 2; 2021 2; 2032 2; 2033 2; 2031 2; 2042 1; 2043 1; 2041 1; 2112 1; 2113 1; 2111 1; 2122 2; 2123 2; 2121 2; 2132 2; 2133 2; 2131 2; 2142 1; 2143 1; 2141 1; 2212 2; 2213 2; 2211 2; 2222 2; 2223 2; 2221 2; 2232 2; 2233 2; 2231 2; 2242 2; 2243 2; 2241 2; 2312 2; 2313 2; 2311 2; 2322 2; 2323 2; 2321 2; 2332 2; 2333 2; 2331 2; 2342 2; 2343 2; 2341 2; 2412 2; 2413 2; 2411 2; 2422 2; 2423 2; 2421 2; 2432 2; 2433 2; 2431 2; 2442 2; 2443 2; 2441 2; 2512 2; 2513 2; 2511 2; 2522 2; 2523 2; 2521 2; 2532 2; 2533 2; 2531 2; 2542 2; 2543 2; 2541 2; 2612 2; 2613 2; 2611 2; 2622 2; 2623 2; 2621 2; 2632 2; 2633 2; 2631 2; 2642 2; 2643 2; 2641 2]; 
elseif strcmp(cfg.roi_selection, 'four') % four rois
	rois = [0112 1; 0113 1; 0111 1; 0122 1; 0123 1; 0121 1; 0132 1; 0133 1; 0131 1; 0142 1; 0143 1; 0141 1; 0212 1; 0213 1; 0211 1; 0222 1; 0223 1; 0221 1; 0232 1; 0233 1; 0231 1; 0242 2; 0243 2; 0241 2; 0312 1; 0313 1; 0311 1; 0322 1; 0323 1; 0321 1; 0332 1; 0333 1; 0331 1; 0342 1; 0343 1; 0341 1; 0412 1; 0413 1; 0411 1; 0422 1; 0423 1; 0421 1; 0432 1; 0433 1; 0431 1; 0442 1; 0443 1; 0441 1; 0512 1; 0513 1; 0511 1; 0522 1; 0523 1; 0521 1; 0532 1; 0533 1; 0531 1; 0542 1; 0543 1; 0541 1; 0612 1; 0613 1; 0611 1; 0622 1; 0623 1; 0621 1; 0632 1; 0633 1; 0631 1; 0642 1; 0643 1; 0641 1; 0712 1; 0713 1; 0711 1; 0722 4; 0723 4; 0721 4; 0732 4; 0733 4; 0731 4; 0742 1; 0743 1; 0741 1; 0812 4; 0813 4; 0811 4; 0822 1; 0823 1; 0821 1; 0912 4; 0913 4; 0911 4; 0922 4; 0923 4; 0921 4; 0932 4; 0933 4; 0931 4; 0942 4; 0943 4; 0941 4; 1012 4; 1013 4; 1011 4; 1022 4; 1023 4; 1021 4; 1032 4; 1033 4; 1031 4; 1042 4; 1043 4; 1041 4; 1112 4; 1113 4; 1111 4; 1122 4; 1123 4; 1121 4; 1132 4; 1133 4; 1131 4; 1142 4; 1143 4; 1141 4; 1212 4; 1213 4; 1211 4; 1222 4; 1223 4; 1221 4; 1232 4; 1233 4; 1231 4; 1242 4; 1243 4; 1241 4; 1312 4; 1313 4; 1311 4; 1322 4; 1323 4; 1321 4; 1332 3; 1333 3; 1331 3; 1342 4; 1343 4; 1341 4; 1412 4; 1413 4; 1411 4; 1422 4; 1423 4; 1421 4; 1432 4; 1433 4; 1431 4; 1442 4; 1443 4; 1441 4; 1512 2; 1513 2; 1511 2; 1522 2; 1523 2; 1521 2; 1532 2; 1533 2; 1531 2; 1542 2; 1543 2; 1541 2; 1612 2; 1613 2; 1611 2; 1622 2; 1623 2; 1621 2; 1632 2; 1633 2; 1631 2; 1642 2; 1643 2; 1641 2; 1712 2; 1713 2; 1711 2; 1722 2; 1723 2; 1721 2; 1732 2; 1733 2; 1731 2; 1742 2; 1743 2; 1741 2; 1812 2; 1813 2; 1811 2; 1822 2; 1823 2; 1821 2; 1832 2; 1833 2; 1831 2; 1842 2; 1843 2; 1841 2; 1912 2; 1913 2; 1911 2; 1922 2; 1923 2; 1921 2; 1932 2; 1933 2; 1931 2; 1942 2; 1943 2; 1941 2; 2012 2; 2013 2; 2011 2; 2022 3; 2023 3; 2021 3; 2032 3; 2033 3; 2031 3; 2042 2; 2043 2; 2041 2; 2112 2; 2113 2; 2111 2; 2122 3; 2123 3; 2121 3; 2132 3; 2133 3; 2131 3; 2142 2; 2143 2; 2141 2; 2212 3; 2213 3; 2211 3; 2222 3; 2223 3; 2221 3; 2232 3; 2233 3; 2231 3; 2242 3; 2243 3; 2241 3; 2312 3; 2313 3; 2311 3; 2322 3; 2323 3; 2321 3; 2332 3; 2333 3; 2331 3; 2342 3; 2343 3; 2341 3; 2412 3; 2413 3; 2411 3; 2422 3; 2423 3; 2421 3; 2432 3; 2433 3; 2431 3; 2442 3; 2443 3; 2441 3; 2512 3; 2513 3; 2511 3; 2522 3; 2523 3; 2521 3; 2532 3; 2533 3; 2531 3; 2542 3; 2543 3; 2541 3; 2612 3; 2613 3; 2611 3; 2622 3; 2623 3; 2621 3; 2632 3; 2633 3; 2631 3; 2642 3; 2643 3; 2641 3];
elseif strcmp(cfg.roi_selection, 'six') % six rois
	rois = [0112 2; 0113 2; 0111 2; 0122 1; 0123 1; 0121 1; 0132 2; 0133 2; 0131 2; 0142 2; 0143 2; 0141 2; 0212 2; 0213 2; 0211 2; 0222 2; 0223 2; 0221 2; 0232 2; 0233 2; 0231 2; 0242 2; 0243 2; 0241 2; 0312 1; 0313 1; 0311 1; 0322 1; 0323 1; 0321 1; 0332 1; 0333 1; 0331 1; 0342 1; 0343 1; 0341 1; 0412 1; 0413 1; 0411 1; 0422 1; 0423 1; 0421 1; 0432 2; 0433 2; 0431 2; 0442 2; 0443 2; 0441 2; 0512 1; 0513 1; 0511 1; 0522 1; 0523 1; 0521 1; 0532 1; 0533 1; 0531 1; 0542 1; 0543 1; 0541 1; 0612 1; 0613 1; 0611 1; 0622 1; 0623 1; 0621 1; 0632 1; 0633 1; 0631 1; 0642 1; 0643 1; 0641 1; 0712 1; 0713 1; 0711 1; 0722 6; 0723 6; 0721 6; 0732 5; 0733 5; 0731 5; 0742 2; 0743 2; 0741 2; 0812 6; 0813 6; 0811 6; 0822 1; 0823 1; 0821 1; 0912 6; 0913 6; 0911 6; 0922 6; 0923 6; 0921 6; 0932 6; 0933 6; 0931 6; 0942 6; 0943 6; 0941 6; 1012 6; 1013 6; 1011 6; 1022 6; 1023 6; 1021 6; 1032 6; 1033 6; 1031 6; 1042 6; 1043 6; 1041 6; 1112 6; 1113 6; 1111 6; 1122 6; 1123 6; 1121 6; 1132 5; 1133 5; 1131 5; 1142 5; 1143 5; 1141 5; 1212 6; 1213 6; 1211 6; 1222 6; 1223 6; 1221 6; 1232 6; 1233 6; 1231 6; 1242 6; 1243 6; 1241 6; 1312 5; 1313 5; 1311 5; 1322 5; 1323 5; 1321 5; 1332 5; 1333 5; 1331 5; 1342 5; 1343 5; 1341 5; 1412 6; 1413 6; 1411 6; 1422 5; 1423 5; 1421 5; 1432 5; 1433 5; 1431 5; 1442 5; 1443 5; 1441 5; 1512 2; 1513 2; 1511 2; 1522 2; 1523 2; 1521 2; 1532 3; 1533 3; 1531 3; 1542 2; 1543 2; 1541 2; 1612 2; 1613 2; 1611 2; 1622 2; 1623 2; 1621 2; 1632 3; 1633 3; 1631 3; 1642 3; 1643 3; 1641 3; 1712 3; 1713 3; 1711 3; 1722 3; 1723 3; 1721 3; 1732 3; 1733 3; 1731 3; 1742 3; 1743 3; 1741 3; 1812 2; 1813 2; 1811 2; 1822 2; 1823 2; 1821 2; 1832 3; 1833 3; 1831 3; 1842 3; 1843 3; 1841 3; 1912 3; 1913 3; 1911 3; 1922 3; 1923 3; 1921 3; 1932 3; 1933 3; 1931 3; 1942 3; 1943 3; 1941 3; 2012 3; 2013 3; 2011 3; 2022 4; 2023 4; 2021 4; 2032 4; 2033 4; 2031 4; 2042 3; 2043 3; 2041 3; 2112 3; 2113 3; 2111 3; 2122 4; 2123 4; 2121 4; 2132 4; 2133 4; 2131 4; 2142 3; 2143 3; 2141 3; 2212 5; 2213 5; 2211 5; 2222 5; 2223 5; 2221 5; 2232 4; 2233 4; 2231 4; 2242 4; 2243 4; 2241 4; 2312 4; 2313 4; 2311 4; 2322 4; 2323 4; 2321 4; 2332 4; 2333 4; 2331 4; 2342 4; 2343 4; 2341 4; 2412 5; 2413 5; 2411 5; 2422 5; 2423 5; 2421 5; 2432 4; 2433 4; 2431 4; 2442 4; 2443 4; 2441 4; 2512 4; 2513 4; 2511 4; 2522 4; 2523 4; 2521 4; 2532 4; 2533 4; 2531 4; 2542 4; 2543 4; 2541 4; 2612 5; 2613 5; 2611 5; 2622 5; 2623 5; 2621 5; 2632 4; 2633 4; 2631 4; 2642 5; 2643 5; 2641 5];
elseif strcmp(cfg.roi_selection, 'tc') % temporal cortices
	rois = [0112 0; 0113 0; 0111 0; 0122 1; 0123 1; 0121 1; 0132 1; 0133 1; 0131 1; 0142 0; 0143 0; 0141 0; 0212 1; 0213 1; 0211 1; 0222 1; 0223 1; 0221 1; 0232 1; 0233 1; 0231 1; 0242 1; 0243 1; 0241 1; 0312 0; 0313 0; 0311 0; 0322 1; 0323 1; 0321 1; 0332 0; 0333 0; 0331 0; 0342 1; 0343 1; 0341 1; 0412 1; 0413 1; 0411 1; 0422 0; 0423 0; 0421 0; 0432 0; 0433 0; 0431 0; 0442 1; 0443 1; 0441 1; 0512 0; 0513 0; 0511 0; 0522 0; 0523 0; 0521 0; 0532 0; 0533 0; 0531 0; 0542 0; 0543 0; 0541 0; 0612 0; 0613 0; 0611 0; 0622 0; 0623 0; 0621 0; 0632 0; 0633 0; 0631 0; 0642 0; 0643 0; 0641 0; 0712 0; 0713 0; 0711 0; 0722 0; 0723 0; 0721 0; 0732 0; 0733 0; 0731 0; 0742 0; 0743 0; 0741 0; 0812 0; 0813 0; 0811 0; 0822 0; 0823 0; 0821 0; 0912 0; 0913 0; 0911 0; 0922 0; 0923 0; 0921 0; 0932 0; 0933 0; 0931 0; 0942 0; 0943 0; 0941 0; 1012 0; 1013 0; 1011 0; 1022 0; 1023 0; 1021 0; 1032 0; 1033 0; 1031 0; 1042 0; 1043 0; 1041 0; 1112 0; 1113 0; 1111 0; 1122 2; 1123 2; 1121 2; 1132 2; 1133 2; 1131 2; 1142 0; 1143 0; 1141 0; 1212 0; 1213 0; 1211 0; 1222 2; 1223 2; 1221 2; 1232 2; 1233 2; 1231 2; 1242 0; 1243 0; 1241 0; 1312 2; 1313 2; 1311 2; 1322 2; 1323 2; 1321 2; 1332 2; 1333 2; 1331 2; 1342 2; 1343 2; 1341 2; 1412 2; 1413 2; 1411 2; 1422 0; 1423 0; 1421 0; 1432 0; 1433 0; 1431 0; 1442 2; 1443 2; 1441 2; 1512 1; 1513 1; 1511 1; 1522 1; 1523 1; 1521 1; 1532 0; 1533 0; 1531 0; 1542 0; 1543 0; 1541 0; 1612 1; 1613 1; 1611 1; 1622 1; 1623 1; 1621 1; 1632 1; 1633 1; 1631 1; 1642 1; 1643 1; 1641 1; 1712 0; 1713 0; 1711 0; 1722 1; 1723 1; 1721 1; 1732 0; 1733 0; 1731 0; 1742 0; 1743 0; 1741 0; 1812 1; 1813 1; 1811 1; 1822 0; 1823 0; 1821 0; 1832 0; 1833 0; 1831 0; 1842 0; 1843 0; 1841 0; 1912 0; 1913 0; 1911 0; 1922 0; 1923 0; 1921 0; 1932 0; 1933 0; 1931 0; 1942 0; 1943 0; 1941 0; 2012 0; 2013 0; 2011 0; 2022 0; 2023 0; 2021 0; 2032 0; 2033 0; 2031 0; 2042 0; 2043 0; 2041 0; 2112 0; 2113 0; 2111 0; 2122 0; 2123 0; 2121 0; 2132 0; 2133 0; 2131 0; 2142 0; 2143 0; 2141 0; 2212 0; 2213 0; 2211 0; 2222 2; 2223 2; 2221 2; 2232 0; 2233 0; 2231 0; 2242 0; 2243 0; 2241 0; 2312 0; 2313 0; 2311 0; 2322 0; 2323 0; 2321 0; 2332 0; 2333 0; 2331 0; 2342 0; 2343 0; 2341 0; 2412 2; 2413 2; 2411 2; 2422 2; 2423 2; 2421 2; 2432 2; 2433 2; 2431 2; 2442 2; 2443 2; 2441 2; 2512 0; 2513 0; 2511 0; 2522 2; 2523 2; 2521 2; 2532 0; 2533 0; 2531 0; 2542 0; 2543 0; 2541 0; 2612 2; 2613 2; 2611 2; 2622 0; 2623 0; 2621 0; 2632 0; 2633 0; 2631 0; 2642 2; 2643 2; 2641 2];
elseif strcmp(cfg.roi_selection, 'poft') % neuromag arrangement
	rois = [0112 2; 0113 2; 0111 2; 0122 1; 0123 1; 0121 1; 0132 2; 0133 2; 0131 2; 0142 2; 0143 2; 0141 2; 0212 2; 0213 2; 0211 2; 0222 2; 0223 2; 0221 2; 0232 2; 0233 2; 0231 2; 0242 2; 0243 2; 0241 2; 0312 1; 0313 1; 0311 1; 0322 1; 0323 1; 0321 1; 0332 1; 0333 1; 0331 1; 0342 1; 0343 1; 0341 1; 0412 3; 0413 3; 0411 3; 0422 3; 0423 3; 0421 3; 0432 3; 0433 3; 0431 3; 0442 3; 0443 3; 0441 3; 0512 1; 0513 1; 0511 1; 0522 1; 0523 1; 0521 1; 0532 1; 0533 1; 0531 1; 0542 1; 0543 1; 0541 1; 0612 1; 0613 1; 0611 1; 0622 1; 0623 1; 0621 1; 0632 3; 0633 3; 0631 3; 0642 1; 0643 1; 0641 1; 0712 3; 0713 3; 0711 3; 0722 6; 0723 6; 0721 6; 0732 6; 0733 6; 0731 6; 0742 3; 0743 3; 0741 3; 0812 8; 0813 8; 0811 8; 0822 1; 0823 1; 0821 1; 0912 8; 0913 8; 0911 8; 0922 8; 0923 8; 0921 8; 0932 8; 0933 8; 0931 8; 0942 8; 0943 8; 0941 8; 1012 8; 1013 8; 1011 8; 1022 8; 1023 8; 1021 8; 1032 8; 1033 8; 1031 8; 1042 6; 1043 6; 1041 6; 1112 6; 1113 6; 1111 6; 1122 6; 1123 6; 1121 6; 1132 6; 1133 6; 1131 6; 1142 6; 1143 6; 1141 6; 1212 8; 1213 8; 1211 8; 1222 8; 1223 8; 1221 8; 1232 8; 1233 8; 1231 8; 1242 8; 1243 8; 1241 8; 1312 7; 1313 7; 1311 7; 1322 7; 1323 7; 1321 7; 1332 7; 1333 7; 1331 7; 1342 7; 1343 7; 1341 7; 1412 8; 1413 8; 1411 8; 1422 7; 1423 7; 1421 7; 1432 7; 1433 7; 1431 7; 1442 7; 1443 7; 1441 7; 1512 2; 1513 2; 1511 2; 1522 2; 1523 2; 1521 2; 1532 2; 1533 2; 1531 2; 1542 2; 1543 2; 1541 2; 1612 2; 1613 2; 1611 2; 1622 2; 1623 2; 1621 2; 1632 3; 1633 3; 1631 3; 1642 4; 1643 4; 1641 4; 1712 4; 1713 4; 1711 4; 1722 4; 1723 4; 1721 4; 1732 4; 1733 4; 1731 4; 1742 4; 1743 4; 1741 4; 1812 3; 1813 3; 1811 3; 1822 3; 1823 3; 1821 3; 1832 3; 1833 3; 1831 3; 1842 3; 1843 3; 1841 3; 1912 4; 1913 4; 1911 4; 1922 4; 1923 4; 1921 4; 1932 4; 1933 4; 1931 4; 1942 4; 1943 4; 1941 4; 2012 3; 2013 3; 2011 3; 2022 6; 2023 6; 2021 6; 2032 5; 2033 5; 2031 5; 2042 4; 2043 4; 2041 4; 2112 4; 2113 4; 2111 4; 2122 5; 2123 5; 2121 5; 2132 5; 2133 5; 2131 5; 2142 4; 2143 4; 2141 4; 2212 6; 2213 6; 2211 6; 2222 6; 2223 6; 2221 6; 2232 6; 2233 6; 2231 6; 2242 6; 2243 6; 2241 6; 2312 5; 2313 5; 2311 5; 2322 5; 2323 5; 2321 5; 2332 5; 2333 5; 2331 5; 2342 5; 2343 5; 2341 5; 2412 7; 2413 7; 2411 7; 2422 7; 2423 7; 2421 7; 2432 5; 2433 5; 2431 5; 2442 6; 2443 6; 2441 6; 2512 5; 2513 5; 2511 5; 2522 5; 2523 5; 2521 5; 2532 5; 2533 5; 2531 5; 2542 5; 2543 5; 2541 5; 2612 7; 2613 7; 2611 7; 2622 7; 2623 7; 2621 7; 2632 7; 2633 7; 2631 7; 2642 7; 2643 7; 2641 7];
elseif strcmp(cfg.roi_selection, 'ind') % own roi definition
	if size(cfg.my_selection,1) >= size(cfg.my_selection,2)
		rois = cfg.my_selection;
	else
		rois = cfg.my_selection';
	end
else
	fprintf('Error: cfg.roi_selection needs to be defined properly.\n');
	return;
end


% Do the plotting
% ---------------
if cfg.plot_on == 1
	% Get 102 positions in 3D
	% -----------------------
	pos = [-0.106600 0.046400 -0.060400; -0.102000 0.063100 -0.025600; -0.108500 0.030200 -0.026600; -0.109900 0.013100 -0.062700; -0.107400 0.032900 0.008000; -0.098900 0.040300 0.041300; -0.101100 0.004400 0.040800; -0.108300 -0.001100 0.007100; -0.086100 0.098800 0.009000; -0.088700 0.075700 0.041200; -0.070200 0.075800 0.070700; -0.100300 0.065900 0.008100; -0.080800 0.041300 0.072000; -0.052600 0.040600 0.095200; -0.053700 0.005900 0.096900; -0.082900 0.006200 0.072800; -0.063700 0.125400 0.013600; -0.033200 0.139700 0.017400; -0.033700 0.127400 0.048500; -0.067200 0.108900 0.044300; -0.035800 0.104800 0.075000; 0.000100 0.077500 0.096700; -0.018400 0.044000 0.106300; -0.036800 0.075300 0.092200; -0.018500 0.010500 0.109600; 0.018600 0.010500 0.109600; 0.018600 -0.023300 0.105900; -0.018500 -0.023700 0.105800; 0.000100 0.144500 0.018700; 0.000100 0.131600 0.050000; 0.033100 0.139700 0.017300; 0.063800 0.125300 0.013500; 0.067100 0.108800 0.044400; 0.033800 0.127300 0.048600; 0.000100 0.109300 0.077100; 0.035800 0.104800 0.075000; 0.036800 0.075200 0.092300; 0.018400 0.044200 0.106200; 0.052500 0.040600 0.095300; 0.080900 0.041300 0.072100; 0.082800 0.006100 0.072800; 0.053500 0.006200 0.097000; 0.086200 0.098600 0.008900; 0.100300 0.066000 0.008200; 0.088700 0.075700 0.041200; 0.069900 0.075800 0.070900; 0.098900 0.040400 0.041300; 0.107400 0.032900 0.008100; 0.108300 -0.001100 0.006800; 0.101000 0.004400 0.041000; 0.102000 0.063000 -0.026000; 0.106500 0.046900 -0.060000; 0.109800 0.013100 -0.062200; 0.108300 0.030100 -0.026200; -0.108800 -0.003200 -0.028400; -0.101700 -0.036000 -0.028100; -0.095100 -0.052400 -0.062300; -0.106800 -0.020500 -0.062500; -0.101700 -0.033900 0.005600; -0.095200 -0.030800 0.039100; -0.078100 -0.062800 0.039400; -0.086600 -0.064000 0.005500; -0.075800 -0.079700 -0.062100; -0.086100 -0.066000 -0.028200; -0.063200 -0.090500 -0.027800; -0.048900 -0.099400 -0.062100; -0.078600 -0.028700 0.069600; -0.051800 -0.027700 0.092700; -0.018100 -0.054200 0.092300; -0.055200 -0.062700 0.070700; -0.051300 -0.086100 0.039700; -0.033500 -0.103300 0.006200; -0.033100 -0.105100 -0.027800; -0.063600 -0.088400 0.006000; -0.018600 -0.080100 0.069000; 0.018600 -0.080200 0.068900; 0.016900 -0.097200 0.039700; -0.017000 -0.097200 0.039700; 0.000000 -0.108600 0.007000; 0.000000 -0.110600 -0.027500; 0.017000 -0.109800 -0.061800; -0.017100 -0.109800 -0.061900; 0.051700 -0.027600 0.092800; 0.078600 -0.028400 0.069800; 0.055300 -0.062800 0.070600; 0.018200 -0.054200 0.092200; 0.051300 -0.086100 0.039700; 0.063700 -0.088400 0.006200; 0.033000 -0.105100 -0.027700; 0.033300 -0.103400 0.006300; 0.095200 -0.030600 0.039200; 0.101700 -0.033800 0.005800; 0.086600 -0.063900 0.005600; 0.078100 -0.062900 0.039400; 0.063000 -0.090600 -0.027600; 0.086100 -0.066100 -0.028000; 0.075700 -0.079800 -0.062000; 0.048800 -0.099400 -0.062100; 0.108700 -0.003300 -0.028000; 0.106800 -0.020600 -0.062100; 0.095100 -0.052400 -0.062000; 0.101700 -0.036100 -0.027800]; 
	sen = find(rem(1:306,3) == 0);

	% Projection for 2d positions
	% ---------------------------
	if cfg.dim == 2
		pos2D = zeros(size(pos,1), 2);
		for i = 1:size(pos,1)
			[theta, phi, r] = cart2sph(pos(i,1), pos(i,2), pos(i,3));
			v = [0 0 1];
			b = acos( (v * pos(i,:)') / (norm(v) * norm(pos(i,:))) );
			[pos2D(i,1), pos2D(i,2)] = pol2cart(theta, b);
		end
		pos = [pos2D ones(size(pos2D,1),1)];
	end

	% Check, whether there are enough color codings
	% ---------------------------------------------
	if ~isfield(cfg, 'color'), cfg.color(1:max(rois(:,2))) = {'k'}; end
	if max(rois(:,2)) > length(cfg.color)
		fprintf('Error: Number in cfg.color does not match the number of rois.\n');
		return;
	end
		
	% Plot 102 channels
	% -----------------
	leg_vect = zeros(max(rois(:,2)),1);
	k = 1;
	hfig = figure;
	set(hfig, 'Color', [1 1 1]);
	hold on;
	for i = 1 : size(pos,1)
		if rois(sen(i),2) == 0
			hscatu = scatter3(pos(i,1), pos(i,2), pos(i,3),[70], [1 1 1], 'filled', 'MarkerEdgeColor', 'k');
		else
			if leg_vect(rois(sen(i),2)) == 1
				hscatu = scatter3(pos(i,1), pos(i,2), pos(i,3),[70], cfg.color{rois(sen(i),2)}, 'filled', 'MarkerEdgeColor', 'k');
			else
				hscati(k) = scatter3(pos(i,1), pos(i,2), pos(i,3),[70], cfg.color{rois(sen(i),2)}, 'filled', 'MarkerEdgeColor', 'k');
				leg_vect(rois(sen(i),2)) = 1;
				leg_text{k} = ['roi' num2str(rois(sen(i),2))];
				k = k + 1;
			end
		end
		text(pos(i,1), pos(i,2), pos(i,3), ['   ' sprintf('%04d', rois(sen(i),1))], 'FontSize', 8, 'Color', 'k');
	end
	title(['MEG channel and ROI positions: ' cfg.roi_selection], 'FontSize', 12);
	daspect([1 1 1])
	set(gca, 'XTickLabel', '');
	set(gca, 'XTick', []);
	set(gca, 'YTickLabel', '');
	set(gca, 'YTick', []);
	set(gca, 'ZTickLabel', '');
	set(gca, 'ZTick', []);
	
	hleg = legend(hscati, leg_text, 'Location', 'SouthOutside');
	set(hleg, 'Box', 'off', 'Orientation', 'horizontal');
	view(0,90);
end % end of cfg.plot_on == 1

return;
